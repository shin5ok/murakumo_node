#!/usr/bin/env murakumo-perl
# chkconfig: 35 99 10
# description: murakumo_node job
use strict;
use warnings;
use File::Basename;
use Data::Dumper;
use YAML;
use Sys::Syslog qw(:DEFAULT setlogsock);
use App::Daemon qw( daemonize );
use Parallel::Prefork;
use POSIX;

use TheSchwartz;
use Storable;
{
  no warnings;
  $Storable::Eval= 1;
}

BEGIN {
  my $yaml = {};
  eval {
    $yaml = YAML::LoadFile( "/root/murakumo_node.yaml" );
  };
  if (exists $yaml->{murakumo_node_path}) {
    unshift @INC, qq{$yaml->{murakumo_node_path}/lib};
  } else {
    unshift @INC, qq{/home/smc/murakumo_node/lib};
  }
};

use Murakumo_Node::CLI::Job;
use Murakumo_Node::CLI::Utils;

my $config  = Murakumo_Node::CLI::Utils->config;
my $db_path  = $config->{job_db_path};
my $progname = "murakumo_node_job";
my $sleep = 1;

$0 = $progname;

sub work {
  $0 = "$0 ( $db_path )";
  my $c = TheSchwartz->new( databases => [ +{ dsn => 'dbi:SQLite:dbname='. $db_path, } ], verbose => 1, );

  eval qq{use Murakumo_Node::CLI::Job::Work;};
  $c->can_do('Murakumo_Node::CLI::Job::Work');

  $c->work( $sleep );
}

sub run {

  no strict 'refs';
  my $job_worker_number = $config->{job_worker_number} || 1;
  my %params = (
    max_workers  => $job_worker_number,
    trap_signals => {
                      TERM => 'TERM',
                      HUP  => 'TERM',
                    },
  );

  my $pm = Parallel::Prefork->new( \%params );

  while ($pm->signal_received ne 'TERM') {
    $pm->start and next;
    work();
    $pm->finish;
  }

  $pm->wait_all_children;

}

$App::Daemon::kill_sig = SIGTERM;
$App::Daemon::pidfile  = "/var/run/" . $progname . ".pid";
$App::Daemon::logfile  = "/var/log/" . $progname . ".log";
$App::Daemon::as_user  = "root";

local $SIG{__WARN__} = sub {
  my $string = shift;
  logging $string;
  CORE::warn $string;
};

daemonize;
run ();


1;
